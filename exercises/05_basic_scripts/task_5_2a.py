# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000


Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)


Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""
inpup = input("введите сеть и маску " )
inpup = inpup.split("/")
ip = inpup[0]
mask = inpup[1]

ip = ip.split(".")
a1,a2,a3,a4 = ip
a11=int(a1)
a22=int(a2)
a33=int(a3)
a44=int(a4)

bin_a1 = (bin(a11)[2::])
bin_a2 = (bin(a22)[2::])
bin_a3 = (bin(a33)[2::])
bin_a4 = (bin(a44)[2::])

b11 = len(bin_a1)
b22 = len(bin_a2)
b33 = len(bin_a3)
b44 = len(bin_a4)

bin_a11 = (8 - b11)*'0' + bin_a1+'.'
bin_a22 = (8 - b22)*'0' + bin_a2+'.'
bin_a33 = (8 - b33)*'0' + bin_a3+'.'
bin_a44 = (8 - b44)*'0' + bin_a4+'.'


bin_ipp=bin_a11+bin_a22+bin_a33+bin_a44


med = int(mask)
mze = 32 - med
bi1= med*"1"
ostat1 = med % 8
osnov1 = int(med / 8)
bi2 = mze*"0"
ostat0 = mze % 8
osnov0 = int(mze / 8)

med22=med+3
bin_ipp1= bin_ipp[0:med22] + '0'*mze





bin_ipp2 = bin_ipp1.split('.')


n1,n2,n3,n4 = bin_ipp2




n11=int(n1,2)
n22=int(n2,2)
n33=int(n3,2)
n44=int(n4,2)






e1 = "11111111\n" * osnov1
e0 = "00000000\n"* osnov0
e10 = ("1"*ostat1)+("0"*ostat0)
e3 = e1+e10+"\n"+e0



e4=e3.strip()
e5 = e4.split()


m1,m2,m3,m4 = e5
m11=int(m1,2)
m22=int(m2,2)
m33=int(m3,2)
m44=int(m4,2)



mask2 = '/'+str(mask)
ip_template = "Network:\n{0:<8}     {1:<8}      {2:<8}      {3:<8}\n{0:08b}     {1:08b}     {2:08b}     {3:08b}"



ip_templatqe ="\n{0:<8}     {1:<8}    {2:<8}    {3:<8}\n{0:08b}  {1:08b}    {2:08b}     {3:08b}"

print(ip_template.format(n11, n22, n33, n44))
print("Mask:")
print(mask2,ip_templatqe.format(m11, m22, m33, m44))

